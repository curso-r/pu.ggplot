{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Visualização\"\nauthor: \"Julio Trecenti, Daniel Falbel\"\ndate: 2016-11-11\n---\n\n```{r, message=FALSE, warning=FALSE, include=FALSE}\nknitr::opts_chunk$set(\n  collapse = TRUE, \n  out.width = \"60%\", out.height = \"60%\",\n  fig.retina = 2\n)\n```\n\n\nPara este tópico vamos utilizar o `ggplot2`. O `ggplot2` é um pacote do R voltado\npara a criação de gráficos estatísticos. Ele é baseado na Gramática dos Gráficos\n(*grammar of graphics*, em inglês), criado por Leland Wilkinson, que é uma \nresposta para a pergunta: o que é um gráfico estatístico? Resumidamente, a gramática\ndiz que um gráfico estatístico é um mapeamento dos dados a partir de atributos\nestéticos (cores, formas, tamanho) em formas geométricas (pontos, linhas, barras).\n\nPara mais informações sobre a Gramática dos Gráficos, você pode consultar o livro\n[*The Grammar of graphics*](http://www.springer.com/statistics/computational+statistics/book/978-0-387-24544-7), \nescrito pelo Leland Wilkinson, ou o livro [ggplot2: elegant graphics for data analysis](http://ggplot2.org/book/), do Hadley Wickham. \nUm [pdf do livro](http://moderngraphics11.pbworks.com/f/ggplot2-Book09hWickham.pdf) também está disponível.\n\nPara quem quiser se aprofundar mais com o `ggplot2`, o [DataCamp](https://www.datacamp.com/) possui dois cursos\nfocados em visualização. É possível começar o curso gratuitamente, mas para terminar,\ntem que pagar. \n\n- [Data Visualization with ggplot2 (Part 1)](https://www.datacamp.com/courses/data-visualization-with-ggplot2-1)\n- [Data Visualization with ggplot2 (Part 2)](https://www.datacamp.com/courses/data-visualization-with-ggplot2-2)\n\nAntes de começar, instale o pacote digitando `install.packages(\"ggplot2\")`.\n\n## Banco de dados\n\nA seguir, vamos discutir os aspectos básicos para a construção de gráficos com o\npacote `ggplot2`. Para isso, utilizaremos o banco de dados contido no objeto `mtcars`.\nPara visualizar as primeiras linhas deste banco, utilize o comando:\n\n```{r}\nhead(mtcars)\n```\n\nO `mtcars` é um banco de dados de 1974 extraído da revista *Motor Trend US* que\ncompreende consumo de combustível e outros 10 aspectos de performance e engenharia\nde 32 automóveis.\n\nEntre as variáveis deste banco de dados estão:\n\n- `mpg`: consumo de combustível (milhas por galão)\n- `disp`: cilindrada, que é o [volume de deslocamento do motor](https://pt.wikipedia.org/wiki/Cilindrada)\n\nPara saber mais sobre o `mtcarts`, digite `help(mtcars)`.\n\n## As camadas de um gráfico\n\nAntes de mais nada, vamos carregar o `ggplot2` usando:\n\n```{r}\nlibrary(ggplot2)\n```\n\nNo `ggplot2`, os gráficos são construídos camada por camada (ou, *layers*, em inglês),\nsendo que a primeira delas é dada pela função `ggplot` (não tem o \"2\"). Cada camada\nrepresenta um tipo de mapeamento ou personalização do gráfico. O código abaixo é um\nexemplo de um gráfico bem simples, construído a partir das duas principais camadas. \n\n```{r grafico1}\nggplot(data = mtcars) + \n  geom_point(mapping = aes(x = disp, y = mpg))\n```\n\nObserve que o primeiro argumento da função `ggplot` é um data frame. A função `aes()`\ndescreve como as variáveis são mapeadas em aspectos visuais de formas geométricas\ndefinidas pelos *geoms*. Aqui, essas formas geométricas são pontos, selecionados pela\nfunção `geom_point()`, gerando, assim, um gráfico de dispersão. A combinação dessas\nduas camadas define o tipo de gráfico que você deseja construir.\n\n## Aesthetics\n\nA primeira camada de um gráfico deve indicar a relação entre os dados e cada aspecto\nvisual do gráfico, como qual variável será representada no eixo x, qual será\nrepresentada no eixo y, a cor e o tamanho dos componentes geométricos etc. Os aspectos\nque podem ou devem ser mapeados depende do tipo de gráfico que você deseja fazer.\n\nNo exemplo acima, atribuímos aspectos de posição: ao eixo y mapeamos a variável `mpg`\n(milhas por galão) e ao eixo x a variável `disp` (cilindradas). Outro aspecto que pode\nser mapeado nesse gráfico é a cor dos pontos\n\n\n```{r mapear_am}\nggplot(data = mtcars) + \n  geom_point(mapping = aes(x = disp, y = mpg, colour = as.factor(am)))\n```\n\nAgora, a variável `am` (tipo de transmissão) foi mapeada à cor dos pontos, sendo que pontos vermelhos correspondem à transmissão automática (valor 0) e pontos azuis à transmissão manual (valor 1). Observe que inserimos a variável `am` como um fator, pois temos interesse apenas nos valores \"0\" e \"1\". No entanto, tambem podemos mapear uma variável contínua à cor dos pontos:\n\n```{r mapear_cor}\nggplot(mtcars) + \n  geom_point(mapping = aes(x = disp, y = mpg, colour = cyl))\n```\n\nAqui, o número de cilindros, `cyl`, é representado pela tonalidade da cor azul.\n\n**Nota**: por *default*, a legenda é insirida no gráfico automaticamente.\n\nTambém podemos mapear o tamanho dos pontos à uma variável de interesse:\n\n```{r mapear_tamanaho}\nggplot(mtcars) +\n  geom_point(mapping = aes(x = disp, y = mpg, colour = cyl, size = wt))\n```\n\n**Exercício**: pesquisar mais aspectos que podem ser alterados no gráfico de dispersão. [Essa](http://ggplot2.tidyverse.org/articles/ggplot2-specs.html) é uma\nboa referência.\n\n## Geoms\n\nOs *geoms* definem qual forma geométrica será utilizada para a visualização dos \ndados no gráfico. Como já vimos, a função `geom_point()` gera gráficos de dispersão\ntransformando pares (x,y) em pontos. Veja a seguir outros *geoms* bastante utilizados:\n\n- `geom_line`: para linhas definidas por pares (x,y)\n- `geom_abline`: para retas definidas por um intercepto e uma inclinação\n- `geom_hline`: para retas horizontais\n- `geom_boxplot`: para boxplots\n- `geom_histogram`: para histogramas\n- `geom_density`: para densidades\n- `geom_area`: para áreas\n- `geom_bar`: para barras\n\nVeja a seguir como é fácil gerar diversos gráficos diferentes utilizando a mesma estrutura do gráfico de dispersão acima:\n\n```{r}\nggplot(mtcars) + \n  geom_boxplot(aes(x = as.factor(cyl), y = mpg))\n```\n\n**Note** que para fazer um boxplot para cada grupo, precisamos passar para o aspecto\nx do gráfico uma variável do tipo `factor`.\n\n```{r}\nggplot(mtcars) + \n  geom_histogram(aes(x = mpg))\n```\n\n```{r}\nggplot(mtcars) + \n  geom_bar(aes(x = as.factor(cyl)))\n```\n\n<div class='admonition note'>\n<p class='admonition-title'>\nUm padrão para os gráficos\n</p>\n<p>\nVocê deve ter percebido que para fazer um gráfico usando `ggplot2` e a gramática\ndos gráficos, existe um padrão:\n\n```\nggplot(data = <DATA>) + \n  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))\n```\n\nPara fazer um gráfico, basta substituir o que está entre `<` com um banco de dados,\numa função geométrica e uma coleção de *mapas estéticos*. Isso será muito útil quando você for fazer o seu próprio gráfico.\n</p>\n</div>\n\n### Exercícios\n\n1. Rode `ggplot(data = mtcars)`. O que você vê?\n2. Quantas linhas existem no `mtcars`. Quantas colunas? **Dica**: use a função `nrows`.\n3. O que a variável `qsec` descreve. Leia o help do `mtcars` para encontrar.\n4. Faça um gráfico de dispersão de `mpg` por `qsec`\n5. O que acontece se você fizer um gráfico de dispersão de `vs` por `mpg`? Porque o \ngráfico não é útil?\n\n## Combinando gráficos\n\nConsidere os 2 gráficos a seguir.\n\n```{r duplochunk, fig.show='hold', out.width = \"50%\"}\n# esquerda\nggplot(mtcars) + \n  geom_point(aes(y = mpg, x = disp))\n# direita\nggplot(mtcars) + \n  geom_smooth(aes(y = mpg, x = disp))\n```\n\nOs gráficos são similares e completaam-se. O da esquerda, mostra como os pontos estão distribuídos. Ele mostra uma tendência de aumento do consumo de combustível de acordo\ncom as cilindradas. Já o gráfico da direita, resume essa relação. Simplificando-a para uma linha de tendência com alguma margem de confiança. \n\nEsses dois gráficos se completam, e ficam bons juntos. Com o `ggplot2` é muito fácil\nsobrepor os dois gráficos, pois ele é pensado para que cada gráfico seja feito com\numa combinação de camadas. Veja o código abaixo.\n\n```{r}\nggplot(mtcars) + \n  geom_point(aes(y = mpg, x = disp)) +\n  geom_smooth(aes(y = mpg, x = disp))\n```\n\nDesta forma, sobrepusemos os pontos e a linha de suavização. No entanto, duplicamos alguns trechos no nosso código, o que geralmente não é bom. Imagine se você precisar\nmudar a variável do eixo `y`, você precisará trocar o nome da variável em mais de um\nlugar do código. Para resolver isso, você pode definir o *mapping* apenas uma vez\ndentro da declaração do gráfico, conforme o código a seguir.\n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp)) + \n  geom_point() +\n  geom_smooth()\n```\n\nVeja que isso gera o mesmo gráfico!\n\nVeja que mesmo com dois `geom`'s, o `ggplot` segue a mesma regra para mapear as\nvariáveis para as `aesthetics`. Por exemplo, se você mapear uma variável para \na cor, você obterá o seguinte gráfico.\n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp, colour = as.factor(cyl))) + \n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\nO `ggplot2` agora desenhou uma reta para cada um dos grupos de pontos e coloriu\ncada grupo de pontos de uma cor diferente. Em alguns casos, você pode querer mapear\na cor em apenas uma das camadas do gráfico. Isso pode ser feito da seguinte forma:\n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp)) + \n  geom_point(aes(colour = as.factor(cyl))) +\n  geom_smooth(method = \"lm\")\n```\n\nNote que agora, cada grupo de pontos tem uma cor mas a reta é única, para todos os pontos.\n\n## Alterando os padrões do gráfico\n\nAté agora, sempre *mapeamos* uma forma estética à uma variável. Muitas vezes \nqueremos apenas modificar esta forma estética sem mapeá-la a outra variável.\nPor exemplo, no gráfico a seguir, modificamos a cor de todos os pontos.\n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp)) + \n  geom_point(colour = \"red\")\n```\n\nA principal diferença aqui é que especificamos o argumento `colour` fora da função\n`aes` como estávamos fazendo antes. Dessa forma podemos controlar todos os parâmetros \nde cada forma geométrica. \n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp)) + \n  geom_point(colour = \"red\", size = 2, shape = 3, alpha = 0.5)\n```\n\n## Facets\n\nUma funcionalidade muito útil do `ggplot2` é a possibilidade de usar `facets`.\nIsso auxilia na visualização de diferentes subconjuntos dos dados em gráficos\nseparados, permitindo a visualização de comportamentos diferentes dependendo\ndo grupo.\n\n```{r}\nggplot(mtcars, aes(y = mpg, x = disp)) + \n  geom_point() +\n  geom_smooth(method = \"lm\") + \n  facet_wrap(~am)\n```\n\nNo gráfico acima, rapidamente conseguimos visualizar que se o carro não é automático o consumo de combustível é muito menor do que quando o carro é automático. Também conseguimos ver que a inclinação das retas é bem diferente dependendo do carro ser\nautomático/manual.",
    "created" : 1484180587125.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "498115095",
    "id" : "12B7D317",
    "lastKnownWriteTime" : 1484180624,
    "last_content_update" : 1484180624635,
    "path" : "~/Desktop/pu.ggplot/01-intro.Rmd",
    "project_path" : "01-intro.Rmd",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}